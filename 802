class Solution {
    public:
        vector<int> eventualSafeNodes(vector<vector<int> > &graph)
        {   
            vector<int> sfNodes;
            init(graph.size());
            for (int i = 0; i < graph.size(); ++i) {
                vector<bool> visited(graph.size(), false);
                if (dfs(graph, visited, i)) sfNodes.push_back(i);
            }
            return sfNodes;
        }
    
        void init(int n)
        {   
            for (int i = 0; i < n; ++i) {
                m_terminated.push_back(-1);
            }
        }
    
        bool dfs(vector<vector<int> > &graph, vector<bool> &visited, int i)
        {   
            if (m_terminated[i] == 1) return true;
            if (m_terminated[i] == 0 || visited[i]) return false;
            visited[i] = true;
            bool result = true;
            for (int next: graph[i]) {
                if (next == i) {
                    m_terminated[i] = 0;
                    return false;
                }
                result = result && dfs(graph, visited, next);
                if (!result) {
                    m_terminated[i] = 0;
                    return result;
                }
            }
            
            m_terminated[i] = 1;
            return result;
        }
    private:
        vector<int> m_terminated;
};
