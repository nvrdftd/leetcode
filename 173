/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
    public:
        BSTIterator(TreeNode* root)
        {   
            if (root != nullptr) _temp.push(root);
        }

        /** @return the next smallest number */
        int next()
        {   
            while (!_temp.empty()) {
                
                TreeNode *root = _temp.top();
                
                if (root->left != nullptr) {
                    _temp.push(root->left);
                    root->left = nullptr;
                    continue;
                }
            
                _temp.pop();
        
                if (root->right != nullptr) {
                    _temp.push(root->right);
                    root->right = nullptr;
                }
                
                return root->val;
            }          
        }
    
        /** @return whether we have a next smallest number */
        bool hasNext()
        {
            if (_temp.empty()) return false;
            return true;
        }
    private:
        std::stack<TreeNode*> _temp;
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
